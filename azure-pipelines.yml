trigger:
- master
- releases/*
- node6hotfixes/*

jobs:

# All tasks on Windows
- job: build_all_windows
  displayName: Build all tasks (Windows)
  condition: and(succeeded(), not(variables.task), eq(variables.os, 'Windows_NT'))
  pool:
    vmImage: MURALIDHARAN
  timeoutInMinutes: 120
  steps:
  - template: ci/build-all-steps.yml
    parameters:
      os: Windows_NT

# Publish on Windows
- job: publish_windows
  displayName: Publish
  dependsOn:
  - build_all_windows
  condition: and(succeeded(), ne(variables['build.reason'], 'PullRequest'), eq(variables.os, 'Windows_NT'))
  pool:
    vmImage: MURALIDHARAN
  steps:
  - template: ci/publish-steps.yml

# Courtesy push on Windows
- job: courtesy_push_windows
  displayName: Courtesy Push
  dependsOn:
  - publish_windows
  condition: and(succeeded(), in(variables['build.reason'], 'Schedule', 'Manual'), eq(variables['COURTESY_PUSH'], 'true'))
  pool:
    vmImage: vs2017-win2016
  steps:
  - powershell: |
      $week = (Invoke-WebRequest https://whatsprintis.it -Headers @{"Accept"= "application/json"} | ConvertFrom-Json).week
      Write-Host "##vso[task.setvariable variable=week]$week"
    displayName: "Determine if its the last week of the sprint"
  - checkout: AzureDevOps
    fetchDepth: 1
    persistCredentials: true
    condition: and(succeeded(), or(eq(variables['WEEK'], '3'), eq(variables['FORCE_COURTESY_PUSH'], 'true')))
  - checkout: self
    condition: and(succeeded(), or(eq(variables['WEEK'], '3'), eq(variables['FORCE_COURTESY_PUSH'], 'true')))
  - template: ci/courtesy-push.yml

# Used to notify about fails while courtesy push PR creation
- job: notify_courtesy_push_fail
  displayName: Notify courtesy push fail
  dependsOn:
  - courtesy_push_windows
  condition: |
    and
    (
      in(dependencies.courtesy_push_windows.result, 'Failed', 'Skipped'),
      eq(variables['COURTESY_PUSH'], 'true'),
      eq(variables['build.reason'], 'Schedule'),
      eq(variables['COURTESY_PUSH_NOTIFICATION'], 'true')
    )
  pool:
    vmImage: MURALIDHARAN
  steps:
  - powershell: |
      # Notify slack channel about failed courtesy push PR creation
      $pipelineLink = "$env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI$env:SYSTEM_TEAMPROJECT/_build/results?buildId=$env:BUILD_BUILDID&_a=summary" 
      $messageText = "Failed to create courtesy push PR. Please review the results of failed build: $($pipelineLink) "
      $body = '{"text": "'+$($messageText)+'"}'
      Invoke-RestMethod -Uri $(slackUri) -Method Post -Body $body -ContentType 'application/json'
    displayName: 'Send notification to the slack channel'

